# Generated by Django 3.1.3 on 2021-07-13 07:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='keine Angabe', max_length=12)),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=90)),
                ('description', models.TextField(blank=True, max_length=300, null=True)),
                ('brand', models.CharField(blank=True, max_length=30, null=True)),
                ('model', models.CharField(blank=True, max_length=30, null=True)),
                ('purchase_date', models.DateField(default=django.utils.timezone.now)),
                ('qualification', models.TextField(max_length=300)),
                ('room', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'verbose_name': 'Gerät',
                'verbose_name_plural': 'Geräte',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(default='maxmustermann@schule.bremen.de', max_length=254, unique=True, verbose_name='email address')),
                ('letter_of_acceptance', models.BooleanField(default=False, verbose_name='Einverständniserklärung')),
                ('induction_course', models.BooleanField(default=False, verbose_name='Kurs belegt')),
                ('course_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Kursbelegungsdatum')),
                ('classes', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Buchungssystem.classes', verbose_name='Klasse')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(blank=True, max_length=500, verbose_name='Inhalt')),
                ('Date', models.DateField(blank=True, verbose_name='Datum')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Benutzer')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, verbose_name='Datum')),
                ('start_time', models.TimeField(verbose_name='Start')),
                ('end_time', models.TimeField(verbose_name='Ende')),
                ('Equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Buchungssystem.equipment', verbose_name='Gerät')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Benutzer')),
            ],
            options={
                'verbose_name': 'Buchung',
                'verbose_name_plural': 'Buchungen',
            },
        ),
        migrations.CreateModel(
            name='AnnulatedAppointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, verbose_name='Datum')),
                ('start_time', models.TimeField(verbose_name='Start')),
                ('end_time', models.TimeField(verbose_name='Ende')),
                ('Equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Buchungssystem.equipment', verbose_name='Gerät')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Benutzer')),
            ],
        ),
    ]
